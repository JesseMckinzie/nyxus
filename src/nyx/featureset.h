#pragma once

enum AvailableFeatures
{
	// Pixel intensity stats
	MEAN = 0, 
	MEDIAN,  
	MIN,  
	MAX,  
	RANGE,  
	STANDARD_DEVIATION,  
	SKEWNESS,  
	KURTOSIS,  
	MEAN_ABSOLUTE_DEVIATION,  
	ENERGY,  
	ROOT_MEAN_SQUARED,  
	ENTROPY,  
	MODE,  
	UNIFORMITY,  
	P10, P25, P75, P90, 
	INTERQUARTILE_RANGE,   
	ROBUST_MEAN_ABSOLUTE_DEVIATION,   
	WEIGHTED_CENTROID_Y,   
	WEIGHTED_CENTROID_X,  

	// Morphology:
	AREA_PIXELS_COUNT,
	CENTROID_X,  
	CENTROID_Y,  
	BBOX_YMIN,  
	BBOX_XMIN,  
	BBOX_HEIGHT,  
	BBOX_WIDTH,  

	MAJOR_AXIS_LENGTH,  
	MINOR_AXIS_LENGTH,  
	ECCENTRICITY,  
	ORIENTATION,  
	NUM_NEIGHBORS,  
	EXTENT,  
	ASPECT_RATIO,  

	EQUIVALENT_DIAMETER,  
	CONVEX_HULL_AREA,  
	SOLIDITY,  
	PERIMETER,  
	CIRCULARITY,  

	EXTREMA_P1_X, EXTREMA_P1_Y,  
	EXTREMA_P2_X, EXTREMA_P2_Y,  
	EXTREMA_P3_X, EXTREMA_P3_Y,  
	EXTREMA_P4_X, EXTREMA_P4_Y,  
	EXTREMA_P5_X, EXTREMA_P5_Y,  
	EXTREMA_P6_X, EXTREMA_P6_Y,  
	EXTREMA_P7_X, EXTREMA_P7_Y,  
	EXTREMA_P8_X, EXTREMA_P8_Y, 

	MIN_FERET_DIAMETER,  
	MAX_FERET_DIAMETER,  
	MIN_FERET_ANGLE,  
	MAX_FERET_ANGLE,  
	STAT_FERET_DIAM_MIN,  
	STAT_FERET_DIAM_MAX,  
	STAT_FERET_DIAM_MEAN,  
	STAT_FERET_DIAM_MEDIAN,  
	STAT_FERET_DIAM_STDDEV,  
	STAT_FERET_DIAM_MODE,  

	STAT_MARTIN_DIAM_MIN,  
	STAT_MARTIN_DIAM_MAX,  
	STAT_MARTIN_DIAM_MEAN,  
	STAT_MARTIN_DIAM_MEDIAN,  
	STAT_MARTIN_DIAM_STDDEV,  
	STAT_MARTIN_DIAM_MODE,  

	STAT_NASSENSTEIN_DIAM_MIN,  
	STAT_NASSENSTEIN_DIAM_MAX,  
	STAT_NASSENSTEIN_DIAM_MEAN,  
	STAT_NASSENSTEIN_DIAM_MEDIAN,  
	STAT_NASSENSTEIN_DIAM_STDDEV,  
	STAT_NASSENSTEIN_DIAM_MODE,  

	EULER_NUBER, 

	POLYGONALITY_AVE,  
	HEXAGONALITY_AVE,  
	HEXAGONALITY_STDDEV,  

	DIAMETER_MIN_ENCLOSING_CIRCLE,  
	DIAMETER_CIRCUMSCRIBING_CIRCLE,  
	DIAMETER_INSCRIBING_CIRCLE,  
	GEODETIC_LENGTH,  
	THICKNESS,
	_COUNT_
};


class FeatureSet
{
public:
	FeatureSet() { enableAll(true); }
	void enableAll(bool newStatus) 
	{
		for (int i = 0; i < AvailableFeatures::_COUNT_; i++)
			enabledFeatures[i] = newStatus;	
	}
	bool isEnabled (int fc) { return fc < AvailableFeatures::_COUNT_ ? enabledFeatures[fc] : false; }
protected:
	bool enabledFeatures [AvailableFeatures::_COUNT_];
};